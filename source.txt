├── README.md
├── backend
│   ├── .gitignore
│   ├── node_modules
│   ├── package-lock.json
│   ├── package.json
│   └── src
│       ├── .env
│       ├── config
│       │   ├── db.js
│       │   └── socket.js
│       ├── controllers
│       │   ├── chatController.js
│       │   └── userController.js
│       ├── middleware
│       │   ├── auth.js
│       │   ├── errorHandler.js
│       │   └── rateLimit.js
│       ├── models
│       │   ├── Message.js
│       │   ├── Room.js
│       │   └── User.js
│       ├── node.js
│       ├── routes
│       │   ├── chatRoutes.js
│       │   └── userRoutes.js
│       ├── server.js
│       └── tests
│           ├── integration
│           │   ├── chat.test.js
│           │   └── user.test.js
│           └── unit
│               ├── chat.test.js
│               └── user.test.js
├── frontend
│   ├── .git
│   ├── .gitignore
│   ├── README.md
│   ├── node_modules
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   │   ├── favicon.ico
│   │   ├── index.html
│   │   ├── logo192.png
│   │   ├── logo512.png
│   │   ├── manifest.json
│   │   └── robots.txt
│   └── src
│       ├── App.css
│       ├── App.js
│       ├── App.test.js
│       ├── components
│       │   ├── ChatRoom.js
│       │   ├── LoginForm.js
│       │   ├── LogoutButton.js
│       │   ├── ProtectedRoute.js
│       │   └── RegisterForm.js
│       ├── contexts
│       │   ├── AuthContext.js
│       │   └── ChatContext.js
│       ├── hooks
│       │   ├── UseAuth.js
│       │   └── UseChat.js
│       ├── index.css
│       ├── index.js
│       ├── logo.svg
│       ├── reportWebVitals.js
│       └── setupTests.js
├── output.txt
└── structure.py

==============================

-db.js
const IORedis = require('ioredis');

const client = new IORedis({
  host: process.env.REDIS_HOST,
  port: process.env.REDIS_PORT,
  password: process.env.REDIS_PASSWORD,
});

client.on('connect', () => {
  console.log('Connected to Redis...');
});

client.on('error', (err) => {
  console.log('Redis error: ', err);
});

module.exports = client;


==============================

-socket.js
const socketIo = require('socket.io');

module.exports = function(server) {
  const io = socketIo(server);

  io.on('connection', (socket) => {
    console.log('New client connected');

    socket.on('joinRoom', (roomId) => {
      socket.join(roomId);
    });

    socket.on('leaveRoom', (roomId) => {
      socket.leave(roomId);
    });

    socket.on('sendMessage', (message) => {
      io.to(message.roomId).emit('receiveMessage', message);
    });

    socket.on('disconnect', () => {
      console.log('Client disconnected');
    });
  });

  return io;
};


==============================

-chatController.js
const Message = require('../models/Message');

exports.sendMessage = async (req, res, next) => {
  const { sender, text } = req.body;

  try {
    // Store the message in the database
    const message = await Message.set(`message:${sender}`, JSON.stringify({ text, timestamp: Date.now() }));

    res.status(201).json({ message: 'Message sent successfully' });
  } catch (error) {
    next(error);
  }
};

exports.getMessages = async (req, res, next) => {
  try {
    // Retrieve the most recent messages from the database
    const messages = await Message.get('message:*');

    res.json({ messages });
  } catch (error) {
    next(error);
  }
};


==============================

-userController.js
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

exports.register = async (req, res, next) => {
  const { username, password } = req.body;

  try {
    // Check if the username already exists
    const userExists = await User.verifyUser(username, password);
    if (userExists) {
      return res.status(400).json({ error: 'Username already taken' });
    }

    // Save the user to the database
    await User.addUser(username, password);

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    next(error);
  }
};

exports.login = async (req, res, next) => {
  const { username, password } = req.body;

  try {
    const validPassword = await User.verifyUser(username, password);
  
    if (!validPassword) {
      return res.status(400).json({ error: 'Invalid password' });
    }
  
    const token = jwt.sign({ username }, process.env.JWT_SECRET, { expiresIn: '1h' });
  
    res.json({ token });
  } catch (error) {
    next(error);
  }
};


==============================

-auth.js
const jwt = require('jsonwebtoken');

exports.authenticate = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader) {
    return res.status(401).json({ error: 'No token provided' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);
    req.user = user;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid token' });
  }
};


==============================

-errorHandler.js
exports.errorHandler = (err, req, res, next) => {
    console.error(err);
    res.status(500).json({ error: err.message });
  };
  

==============================

-rateLimit.js
const IORedis = require('ioredis');
const client = new IORedis();

exports.rateLimiter = async (req, res, next) => {
  const { username } = req.user;

  try {
    const record = await client.get(username);

    if (record !== null) {
      return res.status(429).json({ message: 'Too many messages, please try again later' });
    } else {
      // Set the key to expire in 1 second
      await client.set(username, 'EX', 1, 'NX');
      next();
    }
  } catch (err) {
    throw err;
  }
};


==============================

-Message.js
const IORedis = require("ioredis");

const client = new IORedis({
  host: process.env.REDIS_HOST,
  port: process.env.REDIS_PORT,
  password: process.env.REDIS_PASSWORD,
  retryStrategy: function (times) {
    const delay = Math.min(times * 50, 2000);
    return delay;
  },
});

client.on("error", (err) => {
  console.log("Error", err);
});

// Message data structure
// id (IORedis will generate this id)
// sender
// text
// timestamp

module.exports = client;


==============================

-Room.js
const IORedis = require('ioredis');

const client = new IORedis({
  host: process.env.REDIS_HOST,
  port: process.env.REDIS_PORT,
  password: process.env.REDIS_PASSWORD,
  retryStrategy: function(times) {
    const delay = Math.min(times * 50, 2000);
    return delay;
  },
});

client.on('connect', () => {
  console.log('Redis client connected');
});

client.on('error', (err) => {
  console.log('Error', err);
});

// Room data structure
// id (IORedis will generate this id)
// name

module.exports = client;


==============================

-User.js
console.log("REDIS_HOST:", process.env.REDIS_HOST);
console.log("REDIS_PORT:", process.env.REDIS_PORT);
console.log("REDIS_PASSWORD:", process.env.REDIS_PASSWORD);

const IORedis = require("ioredis");
const bcrypt = require("bcrypt");

console.log("About to create Redis client");

// Create Redis client
const client = new IORedis({
  host: process.env.REDIS_HOST,
  port: process.env.REDIS_PORT,
  password: process.env.REDIS_PASSWORD,
  retryStrategy: function(times) {
    const delay = Math.min(times * 50, 2000);
    return delay;
  },
});

console.log("Redis client created");

client.on("connect", () => {
  console.log("Redis client connected");
});

client.on("error", (err) => {
  console.error("Redis error:", err);
});

console.log("Successfully connected to Redis");

// Redis functions
async function addUser(username, password) {
  const hashedPassword = await hashPassword(password);
  await client.hset(username, "password", hashedPassword);
}

async function hashPassword(password) {
  const salt = await bcrypt.genSalt(10);
  return await bcrypt.hash(password, salt);
}

async function verifyUser(username, password) {
  const hashedPassword = await client.hget(username, "password");
  return bcrypt.compare(password, hashedPassword);
}

module.exports = {
  addUser,
  verifyUser,
  client,
};


==============================

-node.js
require("dotenv").config();
const Redis = require("ioredis");

console.log("REDIS_HOST:", process.env.REDIS_HOST);
console.log("REDIS_PORT:", process.env.REDIS_PORT);
console.log("REDIS_PASSWORD:", process.env.REDIS_PASSWORD);

const redis = new Redis({
  host: process.env.REDIS_HOST,
  port: process.env.REDIS_PORT,
  password: process.env.REDIS_PASSWORD,
});

redis.on("connect", () => {
  console.log("Redis client connected");
});

redis.on("error", (err) => {
  console.error("Redis error:", err);
});

// Keep the script running until manually stopped
setInterval(() => {}, 1000);


==============================

-chatRoutes.js
const express = require('express');
const router = express.Router();
const chatController = require('../controllers/chatController');
const { authenticate } = require('../middleware/auth');

router.post('/send', authenticate, chatController.sendMessage);
router.get('/messages', authenticate, chatController.getMessages);

module.exports = router;


==============================

-userRoutes.js
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');

router.post('/register', userController.register);
router.post('/login', userController.login);
module.exports = router;


==============================

-server.js
require("dotenv").config();

process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err, origin) => {
  console.log('Caught exception:', err, 'Exception origin:', origin);
});


const http = require("http");
const express = require("express");
const cors = require("cors");
const userRoutes = require("./routes/userRoutes");
const chatRoutes = require("./routes/chatRoutes");
const { errorHandler } = require("./middleware/errorHandler");
const User = require("./models/User");

// Create Express app
const app = express();
app.use(cors());
app.use(express.json());

// Routes
app.use("/api/users", userRoutes);
app.use("/api/chat", chatRoutes);

// Error handling middleware
app.use(errorHandler);

// Create HTTP server
const server = http.createServer(app);

// Connect socket.io with the server
const io = require("./config/socket")(server);

server.listen(process.env.PORT || 5000, () => {
  console.log(`Server running on port ${process.env.PORT || 5000}`);
});

// Export the server and io for other modules to use
module.exports = { server, io, client: User.client };


==============================

-chat.test.js


==============================

-user.test.js


==============================

-chat.test.js


==============================

-user.test.js


==============================

-App.js
// App.js
import React from 'react';
import { Route, Routes, Link, Navigate } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import UseAuth from './hooks/UseAuth';
import LoginForm from './components/LoginForm';
import RegisterForm from './components/RegisterForm';
import ChatRoom from './components/ChatRoom';
import LogoutButton from './components/LogoutButton.js';

const ProtectedChatRoom = () => {
  const { user } = UseAuth();

  // Redirect to login if user is not logged in
  if (!user) {
    return <Navigate to="/login" />;
  }

  // If user is logged in, render the chat room
  return <ChatRoom />;
};

const MainApp = () => {
  const { user } = UseAuth();

  return (
    <div className="App">
      {user && <p>Welcome, {user.username}!</p>}
      {user && <LogoutButton />}
      <nav>
        <ul>
          <li><Link to="/login">Login</Link></li>
          <li><Link to="/register">Register</Link></li>
          <li><Link to="/chat">Chat</Link></li>
        </ul>
      </nav>
      <Routes>
        <Route path="/login" element={<LoginForm />} />
        <Route path="/register" element={<RegisterForm />} />
        <Route path="/chat" element={<ProtectedChatRoom />} />
      </Routes>
    </div>
  );
};

const App = () => (
  <AuthProvider>
    <MainApp />
  </AuthProvider>
);

export default App;


==============================

-App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


==============================

-ChatRoom.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import io from 'socket.io-client';

function ChatRoom() {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const socket = io();

  const fetchMessages = async () => {
    try {
      const response = await axios.get('/api/chat/messages');
      setMessages(response.data.messages);
    } catch (error) {
      console.error('Failed to fetch messages', error);
    }
  };

  useEffect(() => {
    fetchMessages();

    socket.on('receiveMessage', (message) => {
      setMessages((messages) => [...messages, message]);
    });

    return () => {
      socket.disconnect();
    };
  }, []);

  const sendMessage = (event) => {
    event.preventDefault();

    socket.emit('sendMessage', { text: message });
    setMessage('');
  };

  return (
    <div>
      <ul>
        {messages.map((message, index) => (
          <li key={index}>{message.text}</li>
        ))}
      </ul>
      <form onSubmit={sendMessage}>
        <input
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Type a message"
        />
        <button type="submit">Send</button>
      </form>
    </div>
  );
}

export default ChatRoom;


==============================

-LoginForm.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const response = await axios.post('/api/users/login', { username, password });
      
      // Store the token in local storage
      localStorage.setItem('token', response.data.token);
      
      // Redirect the user to the chat room
      navigate('/chat');
    } catch (error) {
      console.error('Failed to login', error);
      
      // Show an error message
      alert('Failed to login. Please check your username and password.');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Username:
        <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} />
      </label>
      <label>
        Password:
        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
      </label>
      <button type="submit">Login</button>
    </form>
  );
}

export default LoginForm;


==============================

-LogoutButton.js
import React from 'react';
import { useNavigate } from 'react-router-dom';

function LogoutButton() {
  const navigate = useNavigate();

  const logout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  return (
    <button onClick={logout}>Logout</button>
  );
}

export default LogoutButton;


==============================

-ProtectedRoute.js
import React from 'react';
import { Route, useNavigate } from 'react-router-dom';
import UseAuth from '../hooks/UseAuth';

const ProtectedRoute = ({ component: Component, ...rest }) => {
  const { user } = UseAuth();
  const navigate = useNavigate();

  return (
    <Route
      {...rest}
      element={
        user ? <Component /> : (navigate('/login'), null)
      }
    />
  );
};

export default ProtectedRoute;


==============================

-RegisterForm.js
import React, { useState } from 'react';
import axios from 'axios';

function RegisterForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      await axios.post('/api/users/register', { username, password });
      alert('Registered successfully');
    } catch (error) {
      console.error('Failed to register', error);
    }
  };
  

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Username:
        <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} />
      </label>
      <label>
        Password:
        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
      </label>
      <button type="submit">Register</button>
    </form>
  );
}

export default RegisterForm;


==============================

-AuthContext.js
import React, { createContext, useState } from 'react';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  return (
    <AuthContext.Provider value={{ user, setUser }}>
      {children}
    </AuthContext.Provider>
  );
};


==============================

-ChatContext.js
import React, { createContext, useState } from 'react';

export const ChatContext = createContext();

export const ChatProvider = ({ children }) => {
  const [messages, setMessages] = useState([]);

  return (
    <ChatContext.Provider value={{ messages, setMessages }}>
      {children}
    </ChatContext.Provider>
  );
};


==============================

-UseAuth.js
import { useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext';

const UseAuth = () => {
  return useContext(AuthContext);
};

export default UseAuth;


==============================

-UseChat.js
import { useContext } from 'react';
import { ChatContext } from '../contexts/ChatContext';

const useChat = () => {
  return useContext(ChatContext);
};

export default useChat;


==============================

-index.js
import React from "react";
import ReactDOM from "react-dom";
import { BrowserRouter as Router } from "react-router-dom";
import App from "./App";
import "./index.css";

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>,
  document.getElementById("root")
);


==============================

-reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


==============================

-setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

